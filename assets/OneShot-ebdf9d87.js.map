{"version":3,"file":"OneShot-ebdf9d87.js","sources":["../../src/pages/oneshot/OneShot.tsx"],"sourcesContent":["import { useRef, useState } from \"react\";\nimport { Checkbox, ChoiceGroup, IChoiceGroupOption, Panel, DefaultButton, Spinner, TextField, SpinButton, IDropdownOption, Dropdown } from \"@fluentui/react\";\n\nimport styles from \"./OneShot.module.css\";\n\nimport { askApi, ChatAppResponse, ChatAppRequest, RetrievalMode } from \"../../api\";\nimport { Answer, AnswerError } from \"../../components/Answer\";\nimport { QuestionInput } from \"../../components/QuestionInput\";\nimport { ExampleList } from \"../../components/Example\";\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\nimport { SettingsButton } from \"../../components/SettingsButton/SettingsButton\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { TokenClaimsDisplay } from \"../../components/TokenClaimsDisplay\";\n\nexport function Component(): JSX.Element {\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\n    const [promptTemplatePrefix, setPromptTemplatePrefix] = useState<string>(\"\");\n    const [promptTemplateSuffix, setPromptTemplateSuffix] = useState<string>(\"\");\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\n    const [useOidSecurityFilter, setUseOidSecurityFilter] = useState<boolean>(false);\n    const [useGroupsSecurityFilter, setUseGroupsSecurityFilter] = useState<boolean>(false);\n\n    const lastQuestionRef = useRef<string>(\"\");\n\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [error, setError] = useState<unknown>();\n    const [answer, setAnswer] = useState<ChatAppResponse>();\n\n    const [activeCitation, setActiveCitation] = useState<string>();\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\n\n    const client = undefined;\n\n    const makeApiRequest = async (question: string) => {\n        lastQuestionRef.current = question;\n\n        error && setError(undefined);\n        setIsLoading(true);\n        setActiveCitation(undefined);\n        setActiveAnalysisPanelTab(undefined);\n\n        const token = undefined;\n\n        try {\n            const request: ChatAppRequest = {\n                messages: [\n                    {\n                        content: question,\n                        role: \"user\"\n                    }\n                ],\n                context: {\n                    overrides: {\n                        prompt_template: promptTemplate.length === 0 ? undefined : promptTemplate,\n                        prompt_template_prefix: promptTemplatePrefix.length === 0 ? undefined : promptTemplatePrefix,\n                        prompt_template_suffix: promptTemplateSuffix.length === 0 ? undefined : promptTemplateSuffix,\n                        exclude_category: excludeCategory.length === 0 ? undefined : excludeCategory,\n                        top: retrieveCount,\n                        retrieval_mode: retrievalMode,\n                        semantic_ranker: useSemanticRanker,\n                        semantic_captions: useSemanticCaptions,\n                        use_oid_security_filter: useOidSecurityFilter,\n                        use_groups_security_filter: useGroupsSecurityFilter\n                    }\n                },\n                // ChatAppProtocol: Client must pass on any session state received from the server\n                session_state: answer ? answer.choices[0].session_state : null\n            };\n            const result = await askApi(request, 'access_token');\n            setAnswer(result);\n        } catch (e) {\n            setError(e);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        setPromptTemplate(newValue || \"\");\n    };\n\n    const onPromptTemplatePrefixChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        setPromptTemplatePrefix(newValue || \"\");\n    };\n\n    const onPromptTemplateSuffixChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        setPromptTemplateSuffix(newValue || \"\");\n    };\n\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\n        setRetrieveCount(parseInt(newValue || \"3\"));\n    };\n\n    const onRetrievalModeChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<RetrievalMode> | undefined, index?: number | undefined) => {\n        setRetrievalMode(option?.data || RetrievalMode.Hybrid);\n    };\n\n    const onUseSemanticRankerChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSemanticRanker(!!checked);\n    };\n\n    const onUseSemanticCaptionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSemanticCaptions(!!checked);\n    };\n\n    const onExcludeCategoryChanged = (_ev?: React.FormEvent, newValue?: string) => {\n        setExcludeCategory(newValue || \"\");\n    };\n\n    const onExampleClicked = (example: string) => {\n        makeApiRequest(example);\n    };\n\n    const onShowCitation = (citation: string) => {\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveCitation(citation);\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\n        }\n    };\n\n    const onToggleTab = (tab: AnalysisPanelTabs) => {\n        if (activeAnalysisPanelTab === tab) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveAnalysisPanelTab(tab);\n        }\n    };\n\n    const onUseOidSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseOidSecurityFilter(!!checked);\n    };\n\n    const onUseGroupsSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseGroupsSecurityFilter(!!checked);\n    };\n\n    return (\n        <div className={styles.oneshotContainer}>\n            <div className={styles.oneshotTopSection}>\n                <SettingsButton className={styles.settingsButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\n                <h1 className={styles.oneshotTitle}>Ask your data</h1>\n                <div className={styles.oneshotQuestionInput}>\n                    <QuestionInput\n                        placeholder=\"Example: Does my plan cover annual eye exams?\"\n                        disabled={isLoading}\n                        onSend={question => makeApiRequest(question)}\n                    />\n                </div>\n            </div>\n            <div className={styles.oneshotBottomSection}>\n                {isLoading && <Spinner label=\"Generating answer\" />}\n                {!lastQuestionRef.current && <ExampleList onExampleClicked={onExampleClicked} />}\n                {!isLoading && answer && !error && (\n                    <div className={styles.oneshotAnswerContainer}>\n                        <Answer\n                            answer={answer}\n                            isStreaming={false}\n                            onCitationClicked={x => onShowCitation(x)}\n                            onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab)}\n                            onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab)}\n                        />\n                    </div>\n                )}\n                {error ? (\n                    <div className={styles.oneshotAnswerContainer}>\n                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\n                    </div>\n                ) : null}\n                {activeAnalysisPanelTab && answer && (\n                    <AnalysisPanel\n                        className={styles.oneshotAnalysisPanel}\n                        activeCitation={activeCitation}\n                        onActiveTabChanged={x => onToggleTab(x)}\n                        citationHeight=\"600px\"\n                        answer={answer}\n                        activeTab={activeAnalysisPanelTab}\n                    />\n                )}\n            </div>\n\n            <Panel\n                headerText=\"Configure answer generation\"\n                isOpen={isConfigPanelOpen}\n                isBlocking={false}\n                onDismiss={() => setIsConfigPanelOpen(false)}\n                closeButtonAriaLabel=\"Close\"\n                onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>Close</DefaultButton>}\n                isFooterAtBottom={true}\n            >\n                <TextField\n                    className={styles.oneshotSettingsSeparator}\n                    defaultValue={promptTemplate}\n                    label=\"Override prompt template\"\n                    multiline\n                    autoAdjustHeight\n                    onChange={onPromptTemplateChange}\n                />\n\n                <SpinButton\n                    className={styles.oneshotSettingsSeparator}\n                    label=\"Retrieve this many search results:\"\n                    min={1}\n                    max={50}\n                    defaultValue={retrieveCount.toString()}\n                    onChange={onRetrieveCountChange}\n                />\n                <TextField className={styles.oneshotSettingsSeparator} label=\"Exclude category\" onChange={onExcludeCategoryChanged} />\n                <Checkbox\n                    className={styles.oneshotSettingsSeparator}\n                    checked={useSemanticRanker}\n                    label=\"Use semantic ranker for retrieval\"\n                    onChange={onUseSemanticRankerChange}\n                />\n                <Checkbox\n                    className={styles.oneshotSettingsSeparator}\n                    checked={useSemanticCaptions}\n                    label=\"Use query-contextual summaries instead of whole documents\"\n                    onChange={onUseSemanticCaptionsChange}\n                    disabled={!useSemanticRanker}\n                />\n                <Dropdown\n                    className={styles.oneshotSettingsSeparator}\n                    label=\"Retrieval mode\"\n                    options={[\n                        { key: \"hybrid\", text: \"Vectors + Text (Hybrid)\", selected: retrievalMode == RetrievalMode.Hybrid, data: RetrievalMode.Hybrid },\n                        { key: \"vectors\", text: \"Vectors\", selected: retrievalMode == RetrievalMode.Vectors, data: RetrievalMode.Vectors },\n                        { key: \"text\", text: \"Text\", selected: retrievalMode == RetrievalMode.Text, data: RetrievalMode.Text }\n                    ]}\n                    required\n                    onChange={onRetrievalModeChange}\n                />\n            </Panel>\n        </div>\n    );\n}\n\nComponent.displayName = \"OneShot\";\n"],"names":["Component","isConfigPanelOpen","setIsConfigPanelOpen","useState","promptTemplate","setPromptTemplate","promptTemplatePrefix","setPromptTemplatePrefix","promptTemplateSuffix","setPromptTemplateSuffix","retrievalMode","setRetrievalMode","RetrievalMode","retrieveCount","setRetrieveCount","useSemanticRanker","setUseSemanticRanker","useSemanticCaptions","setUseSemanticCaptions","excludeCategory","setExcludeCategory","useOidSecurityFilter","setUseOidSecurityFilter","useGroupsSecurityFilter","setUseGroupsSecurityFilter","lastQuestionRef","useRef","isLoading","setIsLoading","error","setError","answer","setAnswer","activeCitation","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","makeApiRequest","question","request","result","askApi","e","onPromptTemplateChange","_ev","newValue","onRetrieveCountChange","onRetrievalModeChange","option","index","onUseSemanticRankerChange","checked","onUseSemanticCaptionsChange","onExcludeCategoryChanged","onExampleClicked","example","onShowCitation","citation","AnalysisPanelTabs","onToggleTab","tab","jsxs","styles","jsx","SettingsButton","QuestionInput","Spinner","ExampleList","Answer","x","AnswerError","AnalysisPanel","Panel","DefaultButton","TextField","SpinButton","Checkbox","Dropdown"],"mappings":"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"}