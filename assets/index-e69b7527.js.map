{"version":3,"mappings":"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","names":["github","Layout","jsxs","styles","jsx","Link","NavLink","isActive","Outlet","BACKEND_URI","getHeaders","idToken","headers","askApi","request","response","parsedResponse","chatApi","getCitationFilePath","citation","RetrievalMode","parseAnswerToHtml","answer","isStreaming","onCitationClicked","citations","parsedAnswer","lastIndex","i","part","index","citationIndex","path","renderToStaticMarkup","AnswerIcon","Sparkle28Filled","Answer","isSelected","onThoughtProcessClicked","onSupportingContentClicked","onFollowupQuestionClicked","showFollowupQuestions","followupQuestions","messageContent","useMemo","sanitizedAnswerHtml","DOMPurify","Stack","IconButton","x","AnswerLoading","animatedStyles","useSpring","animated","AnswerError","error","onRetry","ErrorCircle24Regular","PrimaryButton","QuestionInput","onSend","disabled","placeholder","clearOnSend","question","setQuestion","useState","sendQuestion","onEnterPress","ev","onQuestionChange","_ev","newValue","sendQuestionDisabled","TextField","Tooltip","Button","Send28Filled","Example","text","value","icon","onClick","EXAMPLES","ExampleList","onExampleClicked","UserChatMessage","message","parseSupportingContentItem","item","parts","title","content","SupportingContent","supportingContent","parsed","AnalysisPanelTabs","pivotItemDisabledStyle","AnalysisPanel","activeTab","activeCitation","citationHeight","className","onActiveTabChanged","isDisabledThoughtProcessTab","isDisabledSupportingContentTab","isDisabledCitationTab","sanitizedThoughts","Pivot","pivotItem","PivotItem","SettingsButton","Settings24Regular","ClearChatButton","Delete24Regular","Chat","isConfigPanelOpen","setIsConfigPanelOpen","promptTemplate","setPromptTemplate","retrieveCount","setRetrieveCount","retrievalMode","setRetrievalMode","useSemanticRanker","setUseSemanticRanker","shouldStream","setShouldStream","useSemanticCaptions","setUseSemanticCaptions","excludeCategory","setExcludeCategory","useSuggestFollowupQuestions","setUseSuggestFollowupQuestions","useOidSecurityFilter","setUseOidSecurityFilter","useGroupsSecurityFilter","setUseGroupsSecurityFilter","lastQuestionRef","useRef","chatMessageStreamEnd","isLoading","setIsLoading","setIsStreaming","setError","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","selectedAnswer","setSelectedAnswer","answers","setAnswers","streamedAnswers","setStreamedAnswers","handleAsyncRequest","responseBody","askResponse","updateState","newContent","resolve","latestResponse","event","readNDJSONStream","makeApiRequest","a","e","clearChat","useEffect","onPromptTemplateChange","onRetrieveCountChange","onRetrievalModeChange","option","onUseSemanticRankerChange","checked","onUseSemanticCaptionsChange","onShouldStreamChange","onExcludeCategoryChanged","onUseSuggestFollowupQuestionsChange","example","onShowCitation","onToggleTab","tab","streamedAnswer","c","q","Fragment","SparkleFilled","Panel","DefaultButton","SpinButton","Checkbox","Dropdown","layout","initializeIcons","router","createHashRouter","__vitePreload","ReactDOM","React","RouterProvider"],"sources":["../../src/assets/github.svg","../../src/pages/layout/Layout.tsx","../../src/api/api.ts","../../src/api/models.ts","../../src/components/Answer/AnswerParser.tsx","../../src/components/Answer/AnswerIcon.tsx","../../src/components/Answer/Answer.tsx","../../src/components/Answer/AnswerLoading.tsx","../../src/components/Answer/AnswerError.tsx","../../src/components/QuestionInput/QuestionInput.tsx","../../src/components/Example/Example.tsx","../../src/components/Example/ExampleList.tsx","../../src/components/UserChatMessage/UserChatMessage.tsx","../../src/components/SupportingContent/SupportingContentParser.ts","../../src/components/SupportingContent/SupportingContent.tsx","../../src/components/AnalysisPanel/AnalysisPanelTabs.tsx","../../src/components/AnalysisPanel/AnalysisPanel.tsx","../../src/components/SettingsButton/SettingsButton.tsx","../../src/components/ClearChatButton/ClearChatButton.tsx","../../src/pages/chat/Chat.tsx","../../src/index.tsx"],"sourcesContent":["export default \"__VITE_ASSET__4e6ad5ae__\"","import { Outlet, NavLink, Link } from \"react-router-dom\";\n\nimport github from \"../../assets/github.svg\";\n\nimport styles from \"./Layout.module.css\";\n\n\nimport { LoginButton } from \"../../components/LoginButton\";\n\nconst Layout = () => {\n    return (\n        <div className={styles.layout}>\n            <header className={styles.header} role={\"banner\"}>\n                <div className={styles.headerContainer}>\n                    <Link to=\"/\" className={styles.headerTitleContainer}>\n                        <h3 className={styles.headerTitle}>Developed by a Vietnamese student group</h3>\n                    </Link>\n                    <nav>\n                        <ul className={styles.headerNavList}>\n                            <li>\n                                <NavLink to=\"/\" className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}>\n                                    Chat\n                                </NavLink>\n                            </li>\n                            <li className={styles.headerNavLeftMargin}>\n                                <NavLink to=\"/qa\" className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}>\n                                    Ask a question\n                                </NavLink>\n                            </li>\n                            <li className={styles.headerNavLeftMargin}>\n                                <a href=\"https://github.com/swedenmentor/swedenmentor.github.io\" target={\"_blank\"} title=\"Github repository link\">\n                                    <img\n                                        src={github}\n                                        alt=\"Github logo\"\n                                        aria-label=\"Link to github repository\"\n                                        width=\"20px\"\n                                        height=\"20px\"\n                                        className={styles.githubLogo}\n                                    />\n                                </a>\n                            </li>\n                        </ul>\n                    </nav>\n                    <h4 className={styles.headerRightText}>An information hub for international residents living in Sweden</h4>\n                </div>\n            </header>\n\n            <Outlet />\n        </div>\n    );\n};\n\nexport default Layout;\n","const BACKEND_URI = \"\";\n\nimport { ChatAppResponse, ChatAppResponseOrError, ChatAppRequest } from \"./models\";\n\nfunction getHeaders(idToken: string | undefined): Record<string, string> {\n    var headers: Record<string, string> = {\n        \"Content-Type\": \"application/json\"\n    };\n\n    return headers;\n}\n\nexport async function askApi(request: ChatAppRequest, idToken: string | undefined): Promise<ChatAppResponse> {\n    const response = await fetch(`${BACKEND_URI}/ask`, {\n        method: \"POST\",\n        headers: getHeaders(idToken),\n        body: JSON.stringify(request)\n    });\n\n    const parsedResponse: ChatAppResponseOrError = await response.json();\n    if (response.status > 299 || !response.ok) {\n        throw Error(parsedResponse.error || \"Unknown error\");\n    }\n\n    return parsedResponse as ChatAppResponse;\n}\n\nexport async function chatApi(request: ChatAppRequest, idToken: string | undefined): Promise<Response> {\n    return await fetch(`${BACKEND_URI}/chat`, {\n        method: \"POST\",\n        headers: getHeaders(idToken),\n        body: JSON.stringify(request)\n    });\n}\n\nexport function getCitationFilePath(citation: string): string {\n    return `${BACKEND_URI}/content/${citation}`;\n}\n","export const enum RetrievalMode {\n    Hybrid = \"hybrid\",\n    Vectors = \"vectors\",\n    Text = \"text\"\n}\n\nexport type ChatAppRequestOverrides = {\n    retrieval_mode?: RetrievalMode;\n    semantic_ranker?: boolean;\n    semantic_captions?: boolean;\n    exclude_category?: string;\n    top?: number;\n    temperature?: number;\n    prompt_template?: string;\n    prompt_template_prefix?: string;\n    prompt_template_suffix?: string;\n    suggest_followup_questions?: boolean;\n    use_oid_security_filter?: boolean;\n    use_groups_security_filter?: boolean;\n};\n\nexport type ResponseMessage = {\n    content: string;\n    role: string;\n};\n\nexport type ResponseContext = {\n    thoughts: string | null;\n    data_points: string[];\n    followup_questions: string[] | null;\n};\n\nexport type ResponseChoice = {\n    index: number;\n    message: ResponseMessage;\n    context: ResponseContext;\n    session_state: any;\n};\n\nexport type ChatAppResponseOrError = {\n    choices?: ResponseChoice[];\n    error?: string;\n};\n\nexport type ChatAppResponse = {\n    choices: ResponseChoice[];\n};\n\nexport type ChatAppRequestContext = {\n    overrides?: ChatAppRequestOverrides;\n};\n\nexport type ChatAppRequest = {\n    messages: ResponseMessage[];\n    context?: ChatAppRequestContext;\n    stream?: boolean;\n    session_state: any;\n};\n","import { renderToStaticMarkup } from \"react-dom/server\";\nimport { getCitationFilePath } from \"../../api\";\n\ntype HtmlParsedAnswer = {\n    answerHtml: string;\n    citations: string[];\n};\n\nexport function parseAnswerToHtml(answer: string, isStreaming: boolean, onCitationClicked: (citationFilePath: string) => void): HtmlParsedAnswer {\n    const citations: string[] = [];\n\n    // trim any whitespace from the end of the answer after removing follow-up questions\n    let parsedAnswer = answer.trim();\n\n    // Omit a citation that is still being typed during streaming\n    if (isStreaming) {\n        let lastIndex = parsedAnswer.length;\n        for (let i = parsedAnswer.length - 1; i >= 0; i--) {\n            if (parsedAnswer[i] === \"]\") {\n                break;\n            } else if (parsedAnswer[i] === \"[\") {\n                lastIndex = i;\n                break;\n            }\n        }\n        const truncatedAnswer = parsedAnswer.substring(0, lastIndex);\n        parsedAnswer = truncatedAnswer;\n    }\n\n    const parts = parsedAnswer.split(/\\[([^\\]]+)\\]/g);\n\n    const fragments: string[] = parts.map((part, index) => {\n        if (index % 2 === 0) {\n            return part;\n        } else {\n            let citationIndex: number;\n            if (citations.indexOf(part) !== -1) {\n                citationIndex = citations.indexOf(part) + 1;\n            } else {\n                citations.push(part);\n                citationIndex = citations.length;\n            }\n\n            const path = getCitationFilePath(part);\n\n            return renderToStaticMarkup(\n                <a className=\"supContainer\" title={part} onClick={() => onCitationClicked(path)}>\n                    <sup>{citationIndex}</sup>\n                </a>\n            );\n        }\n    });\n\n    return {\n        answerHtml: fragments.join(\"\"),\n        citations\n    };\n}\n","import { Sparkle28Filled } from \"@fluentui/react-icons\";\n\nexport const AnswerIcon = () => {\n    return <Sparkle28Filled primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Answer logo\" />;\n};\n","import { useMemo } from \"react\";\nimport { Stack, IconButton } from \"@fluentui/react\";\nimport DOMPurify from \"dompurify\";\n\nimport styles from \"./Answer.module.css\";\n\nimport { ChatAppResponse, getCitationFilePath } from \"../../api\";\nimport { parseAnswerToHtml } from \"./AnswerParser\";\nimport { AnswerIcon } from \"./AnswerIcon\";\n\ninterface Props {\n    answer: ChatAppResponse;\n    isSelected?: boolean;\n    isStreaming: boolean;\n    onCitationClicked: (filePath: string) => void;\n    onThoughtProcessClicked: () => void;\n    onSupportingContentClicked: () => void;\n    onFollowupQuestionClicked?: (question: string) => void;\n    showFollowupQuestions?: boolean;\n}\n\nexport const Answer = ({\n    answer,\n    isSelected,\n    isStreaming,\n    onCitationClicked,\n    onThoughtProcessClicked,\n    onSupportingContentClicked,\n    onFollowupQuestionClicked,\n    showFollowupQuestions\n}: Props) => {\n    const followupQuestions = answer.choices[0].context.followup_questions;\n    const messageContent = answer.choices[0].message.content;\n    const parsedAnswer = useMemo(() => parseAnswerToHtml(messageContent, isStreaming, onCitationClicked), [answer]);\n\n    const sanitizedAnswerHtml = DOMPurify.sanitize(parsedAnswer.answerHtml);\n\n    return (\n        <Stack className={`${styles.answerContainer} ${isSelected && styles.selected}`} verticalAlign=\"space-between\">\n            <Stack.Item>\n                <Stack horizontal horizontalAlign=\"space-between\">\n                    <AnswerIcon />\n                    <div>\n                        <IconButton\n                            style={{ color: \"black\" }}\n                            iconProps={{ iconName: \"Lightbulb\" }}\n                            title=\"Show thought process\"\n                            ariaLabel=\"Show thought process\"\n                            onClick={() => onThoughtProcessClicked()}\n                            disabled={!answer.choices[0].context.thoughts?.length}\n                        />\n                        <IconButton\n                            style={{ color: \"black\" }}\n                            iconProps={{ iconName: \"ClipboardList\" }}\n                            title=\"Show supporting content\"\n                            ariaLabel=\"Show supporting content\"\n                            onClick={() => onSupportingContentClicked()}\n                            disabled={!answer.choices[0].context.data_points?.length}\n                        />\n                    </div>\n                </Stack>\n            </Stack.Item>\n\n            <Stack.Item grow>\n                <div className={styles.answerText} dangerouslySetInnerHTML={{ __html: sanitizedAnswerHtml }}></div>\n            </Stack.Item>\n\n            {!!parsedAnswer.citations.length && (\n                <Stack.Item>\n                    <Stack horizontal wrap tokens={{ childrenGap: 5 }}>\n                        <span className={styles.citationLearnMore}>Citations:</span>\n                        {parsedAnswer.citations.map((x, i) => {\n                            const path = getCitationFilePath(x);\n                            return (\n                                <a key={i} className={styles.citation} title={x} onClick={() => onCitationClicked(path)}>\n                                    {`${++i}. ${x}`}\n                                </a>\n                            );\n                        })}\n                    </Stack>\n                </Stack.Item>\n            )}\n\n            {!!followupQuestions?.length && showFollowupQuestions && onFollowupQuestionClicked && (\n                <Stack.Item>\n                    <Stack horizontal wrap className={`${!!parsedAnswer.citations.length ? styles.followupQuestionsList : \"\"}`} tokens={{ childrenGap: 6 }}>\n                        <span className={styles.followupQuestionLearnMore}>Follow-up questions:</span>\n                        {followupQuestions.map((x, i) => {\n                            return (\n                                <a key={i} className={styles.followupQuestion} title={x} onClick={() => onFollowupQuestionClicked(x)}>\n                                    {`${x}`}\n                                </a>\n                            );\n                        })}\n                    </Stack>\n                </Stack.Item>\n            )}\n        </Stack>\n    );\n};\n","import { Stack } from \"@fluentui/react\";\nimport { animated, useSpring } from \"@react-spring/web\";\n\nimport styles from \"./Answer.module.css\";\nimport { AnswerIcon } from \"./AnswerIcon\";\n\nexport const AnswerLoading = () => {\n    const animatedStyles = useSpring({\n        from: { opacity: 0 },\n        to: { opacity: 1 }\n    });\n\n    return (\n        <animated.div style={{ ...animatedStyles }}>\n            <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\n                <AnswerIcon />\n                <Stack.Item grow>\n                    <p className={styles.answerText}>\n                        Generating answer\n                        <span className={styles.loadingdots} />\n                    </p>\n                </Stack.Item>\n            </Stack>\n        </animated.div>\n    );\n};\n","import { Stack, PrimaryButton } from \"@fluentui/react\";\nimport { ErrorCircle24Regular } from \"@fluentui/react-icons\";\n\nimport styles from \"./Answer.module.css\";\n\ninterface Props {\n    error: string;\n    onRetry: () => void;\n}\n\nexport const AnswerError = ({ error, onRetry }: Props) => {\n    return (\n        <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\n            <ErrorCircle24Regular aria-hidden=\"true\" aria-label=\"Error icon\" primaryFill=\"red\" />\n\n            <Stack.Item grow>\n                <p className={styles.answerText}>{error}</p>\n            </Stack.Item>\n\n            <PrimaryButton className={styles.retryButton} onClick={onRetry} text=\"Retry\" />\n        </Stack>\n    );\n};\n","import { useState } from \"react\";\nimport { Stack, TextField } from \"@fluentui/react\";\nimport { Button, Tooltip, Field, Textarea } from \"@fluentui/react-components\";\nimport { Send28Filled } from \"@fluentui/react-icons\";\n\nimport styles from \"./QuestionInput.module.css\";\n\ninterface Props {\n    onSend: (question: string) => void;\n    disabled: boolean;\n    placeholder?: string;\n    clearOnSend?: boolean;\n}\n\nexport const QuestionInput = ({ onSend, disabled, placeholder, clearOnSend }: Props) => {\n    const [question, setQuestion] = useState<string>(\"\");\n\n    const sendQuestion = () => {\n        if (disabled || !question.trim()) {\n            return;\n        }\n\n        onSend(question);\n\n        if (clearOnSend) {\n            setQuestion(\"\");\n        }\n    };\n\n    const onEnterPress = (ev: React.KeyboardEvent<Element>) => {\n        if (ev.key === \"Enter\" && !ev.shiftKey) {\n            ev.preventDefault();\n            sendQuestion();\n        }\n    };\n\n    const onQuestionChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        if (!newValue) {\n            setQuestion(\"\");\n        } else if (newValue.length <= 1000) {\n            setQuestion(newValue);\n        }\n    };\n\n    const sendQuestionDisabled = disabled || !question.trim();\n\n    return (\n        <Stack horizontal className={styles.questionInputContainer}>\n            <TextField\n                className={styles.questionInputTextArea}\n                placeholder={placeholder}\n                multiline\n                resizable={false}\n                borderless\n                value={question}\n                onChange={onQuestionChange}\n                onKeyDown={onEnterPress}\n            />\n            <div className={styles.questionInputButtonsContainer}>\n                <Tooltip content=\"Ask question button\" relationship=\"label\">\n                    <Button size=\"large\" icon={<Send28Filled primaryFill=\"rgba(115, 118, 225, 1)\" />} disabled={sendQuestionDisabled} onClick={sendQuestion} />\n                </Tooltip>\n            </div>\n        </Stack>\n    );\n};\n","import styles from \"./Example.module.css\";\n\ninterface Props {\n    text: string;\n    value: string;\n    icon: string;\n    onClick: (value: string) => void;\n}\n\nexport const Example = ({ text, value, icon, onClick }: Props) => {\n    return (\n        <div className={styles.example} onClick={() => onClick(value)}>\n            <img src={icon} alt={text} className={styles.exampleIcon}/>\n            <p className={styles.exampleText}>{text}</p>\n        </div>\n    );\n};\n","import { Example } from \"./Example\";\n\nimport styles from \"./Example.module.css\";\n\nexport type ExampleModel = {\n    text: string;\n    value: string;\n    icon: string;\n};\n\nconst EXAMPLES: ExampleModel[] = [\n    {\n        text: \"How much does it cost to study a Master's program in Sweden?\",\n        value: \"How much does it cost to study a Master's program in Sweden?\",\n        icon: \"./icons/chat.png\"\n    },\n    {   text: \"How are income taxes calculated in Sweden?\",\n        value: \"How are income taxes calculated in Sweden?\",\n        icon: \"./icons/tax.png\"\n    },\n    {   text: \"What are the conditions for permanent residence permit in Sweden?\",\n        value: \"What are the conditions for permanent residence permit in Sweden?\",\n        icon: \"./icons/organization.png\"\n    }\n];\n\ninterface Props {\n    onExampleClicked: (value: string) => void;\n}\n\nexport const ExampleList = ({ onExampleClicked }: Props) => {\n    return (\n        <ul className={styles.examplesNavList}>\n            {EXAMPLES.map((x, i) => (\n                <li key={i}>\n                    <Example text={x.text} value={x.value} icon={x.icon} onClick={onExampleClicked} />\n                </li>\n            ))}\n        </ul>\n    );\n};\n","import styles from \"./UserChatMessage.module.css\";\n\ninterface Props {\n    message: string;\n}\n\nexport const UserChatMessage = ({ message }: Props) => {\n    return (\n        <div className={styles.container}>\n            <div className={styles.message}>{message}</div>\n        </div>\n    );\n};\n","type ParsedSupportingContentItem = {\n    title: string;\n    content: string;\n};\n\nexport function parseSupportingContentItem(item: string): ParsedSupportingContentItem {\n    // Assumes the item starts with the file name followed by : and the content.\n    // Example: \"sdp_corporate.pdf: this is the content that follows\".\n    const parts = item.split(\": \");\n    const title = parts[0];\n    const content = parts.slice(1).join(\": \");\n\n    return {\n        title,\n        content\n    };\n}\n","import { parseSupportingContentItem } from \"./SupportingContentParser\";\n\nimport styles from \"./SupportingContent.module.css\";\n\ninterface Props {\n    supportingContent: string[];\n}\n\nexport const SupportingContent = ({ supportingContent }: Props) => {\n    return (\n        <ul className={styles.supportingContentNavList}>\n            {supportingContent.map((x, i) => {\n                const parsed = parseSupportingContentItem(x);\n\n                return (\n                    <li className={styles.supportingContentItem}>\n                        <h4 className={styles.supportingContentItemHeader}>{parsed.title}</h4>\n                        <p className={styles.supportingContentItemText}>{parsed.content}</p>\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n","export enum AnalysisPanelTabs {\n    ThoughtProcessTab = \"thoughtProcess\",\n    SupportingContentTab = \"supportingContent\",\n    CitationTab = \"citation\"\n}\n","import { Pivot, PivotItem } from \"@fluentui/react\";\nimport DOMPurify from \"dompurify\";\n\nimport styles from \"./AnalysisPanel.module.css\";\n\nimport { SupportingContent } from \"../SupportingContent\";\nimport { ChatAppResponse } from \"../../api\";\nimport { AnalysisPanelTabs } from \"./AnalysisPanelTabs\";\n\ninterface Props {\n    className: string;\n    activeTab: AnalysisPanelTabs;\n    onActiveTabChanged: (tab: AnalysisPanelTabs) => void;\n    activeCitation: string | undefined;\n    citationHeight: string;\n    answer: ChatAppResponse;\n}\n\nconst pivotItemDisabledStyle = { disabled: true, style: { color: \"grey\" } };\n\nexport const AnalysisPanel = ({ answer, activeTab, activeCitation, citationHeight, className, onActiveTabChanged }: Props) => {\n    const isDisabledThoughtProcessTab: boolean = !answer.choices[0].context.thoughts;\n    const isDisabledSupportingContentTab: boolean = !answer.choices[0].context.data_points.length;\n    const isDisabledCitationTab: boolean = !activeCitation;\n\n    const sanitizedThoughts = DOMPurify.sanitize(answer.choices[0].context.thoughts!);\n\n    return (\n        <Pivot\n            className={className}\n            selectedKey={activeTab}\n            onLinkClick={pivotItem => pivotItem && onActiveTabChanged(pivotItem.props.itemKey! as AnalysisPanelTabs)}\n        >\n            <PivotItem\n                itemKey={AnalysisPanelTabs.ThoughtProcessTab}\n                headerText=\"Thought process\"\n                headerButtonProps={isDisabledThoughtProcessTab ? pivotItemDisabledStyle : undefined}\n            >\n                <div className={styles.thoughtProcess} dangerouslySetInnerHTML={{ __html: sanitizedThoughts }}></div>\n            </PivotItem>\n            <PivotItem\n                itemKey={AnalysisPanelTabs.SupportingContentTab}\n                headerText=\"Supporting content\"\n                headerButtonProps={isDisabledSupportingContentTab ? pivotItemDisabledStyle : undefined}\n            >\n                <SupportingContent supportingContent={answer.choices[0].context.data_points} />\n            </PivotItem>\n            <PivotItem\n                itemKey={AnalysisPanelTabs.CitationTab}\n                headerText=\"Citation\"\n                headerButtonProps={isDisabledCitationTab ? pivotItemDisabledStyle : undefined}\n            >\n                <iframe title=\"Citation\" src={activeCitation} width=\"100%\" height={citationHeight} />\n            </PivotItem>\n        </Pivot>\n    );\n};\n","import { Settings24Regular } from \"@fluentui/react-icons\";\nimport { Button } from \"@fluentui/react-components\";\n\nimport styles from \"./SettingsButton.module.css\";\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n}\n\nexport const SettingsButton = ({ className, onClick }: Props) => {\n    return (\n        <div className={`${styles.container} ${className ?? \"\"}`}>\n            <Button icon={<Settings24Regular />} onClick={onClick}>\n                {\"Developer settings\"}\n            </Button>\n        </div>\n    );\n};\n","import { Delete24Regular } from \"@fluentui/react-icons\";\nimport { Button } from \"@fluentui/react-components\";\n\nimport styles from \"./ClearChatButton.module.css\";\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n    disabled?: boolean;\n}\n\nexport const ClearChatButton = ({ className, disabled, onClick }: Props) => {\n    return (\n        <div className={`${styles.container} ${className ?? \"\"}`}>\n            <Button\n            icon={<Delete24Regular />}\n            disabled={disabled}\n            onClick={onClick}\n            >\n                {\"Clear chat\"}\n            </Button>\n        </div>\n    );\n};\n","import { useRef, useState, useEffect } from \"react\";\nimport { Checkbox, Panel, DefaultButton, TextField, SpinButton, Dropdown, IDropdownOption } from \"@fluentui/react\";\nimport { SparkleFilled } from \"@fluentui/react-icons\";\nimport readNDJSONStream from \"ndjson-readablestream\";\n\nimport styles from \"./Chat.module.css\";\n\nimport { chatApi, RetrievalMode, ChatAppResponse, ChatAppResponseOrError, ChatAppRequest, ResponseMessage } from \"../../api\";\nimport { Answer, AnswerError, AnswerLoading } from \"../../components/Answer\";\nimport { QuestionInput } from \"../../components/QuestionInput\";\nimport { ExampleList } from \"../../components/Example\";\nimport { UserChatMessage } from \"../../components/UserChatMessage\";\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\nimport { SettingsButton } from \"../../components/SettingsButton\";\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { TokenClaimsDisplay } from \"../../components/TokenClaimsDisplay\";\n\nconst Chat = () => {\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\n    const [shouldStream, setShouldStream] = useState<boolean>(true);\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\n    const [useSuggestFollowupQuestions, setUseSuggestFollowupQuestions] = useState<boolean>(false);\n    const [useOidSecurityFilter, setUseOidSecurityFilter] = useState<boolean>(false);\n    const [useGroupsSecurityFilter, setUseGroupsSecurityFilter] = useState<boolean>(false);\n\n    const lastQuestionRef = useRef<string>(\"\");\n    const chatMessageStreamEnd = useRef<HTMLDivElement | null>(null);\n\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [isStreaming, setIsStreaming] = useState<boolean>(false);\n    const [error, setError] = useState<unknown>();\n\n    const [activeCitation, setActiveCitation] = useState<string>();\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\n\n    const [selectedAnswer, setSelectedAnswer] = useState<number>(0);\n    const [answers, setAnswers] = useState<[user: string, response: ChatAppResponse][]>([]);\n    const [streamedAnswers, setStreamedAnswers] = useState<[user: string, response: ChatAppResponse][]>([]);\n\n    const handleAsyncRequest = async (question: string, answers: [string, ChatAppResponse][], setAnswers: Function, responseBody: ReadableStream<any>) => {\n        let answer: string = \"\";\n        let askResponse: ChatAppResponse = {} as ChatAppResponse;\n\n        const updateState = (newContent: string) => {\n            return new Promise(resolve => {\n                setTimeout(() => {\n                    answer += newContent;\n                    const latestResponse: ChatAppResponse = {\n                        ...askResponse,\n                        choices: [{ ...askResponse.choices[0], message: { content: answer, role: askResponse.choices[0].message.role } }]\n                    };\n                    setStreamedAnswers([...answers, [question, latestResponse]]);\n                    resolve(null);\n                }, 33);\n            });\n        };\n        try {\n            setIsStreaming(true);\n            for await (const event of readNDJSONStream(responseBody)) {\n                if (event[\"choices\"] && event[\"choices\"][0][\"context\"] && event[\"choices\"][0][\"context\"][\"data_points\"]) {\n                    event[\"choices\"][0][\"message\"] = event[\"choices\"][0][\"delta\"];\n                    askResponse = event;\n                } else if (event[\"choices\"] && event[\"choices\"][0][\"delta\"][\"content\"]) {\n                    setIsLoading(false);\n                    await updateState(event[\"choices\"][0][\"delta\"][\"content\"]);\n                } else if (event[\"choices\"] && event[\"choices\"][0][\"context\"]) {\n                    // Update context with new keys from latest event\n                    askResponse.choices[0].context = { ...askResponse.choices[0].context, ...event[\"choices\"][0][\"context\"] };\n                } else if (event[\"error\"]) {\n                    throw Error(event[\"error\"]);\n                }\n            }\n        } finally {\n            setIsStreaming(false);\n        }\n        const fullResponse: ChatAppResponse = {\n            ...askResponse,\n            choices: [{ ...askResponse.choices[0], message: { content: answer, role: askResponse.choices[0].message.role } }]\n        };\n        return fullResponse;\n    };\n\n    const client = undefined;\n\n    const makeApiRequest = async (question: string) => {\n        lastQuestionRef.current = question;\n\n        error && setError(undefined);\n        setIsLoading(true);\n        setActiveCitation(undefined);\n        setActiveAnalysisPanelTab(undefined);\n\n        const token = undefined;\n\n        try {\n            const messages: ResponseMessage[] = answers.flatMap(a => [\n                { content: a[0], role: \"user\" },\n                { content: a[1].choices[0].message.content, role: \"assistant\" }\n            ]);\n\n            const request: ChatAppRequest = {\n                messages: [...messages, { content: question, role: \"user\" }],\n                stream: shouldStream,\n                context: {\n                    overrides: {\n                        prompt_template: promptTemplate.length === 0 ? undefined : promptTemplate,\n                        exclude_category: excludeCategory.length === 0 ? undefined : excludeCategory,\n                        top: retrieveCount,\n                        retrieval_mode: retrievalMode,\n                        semantic_ranker: useSemanticRanker,\n                        semantic_captions: useSemanticCaptions,\n                        suggest_followup_questions: useSuggestFollowupQuestions,\n                        use_oid_security_filter: useOidSecurityFilter,\n                        use_groups_security_filter: useGroupsSecurityFilter\n                    }\n                },\n                // ChatAppProtocol: Client must pass on any session state received from the server\n                session_state: answers.length ? answers[answers.length - 1][1].choices[0].session_state : null\n            };\n\n            const response = await chatApi(request, 'access_token');\n            if (!response.body) {\n                throw Error(\"No response body\");\n            }\n            if (shouldStream) {\n                const parsedResponse: ChatAppResponse = await handleAsyncRequest(question, answers, setAnswers, response.body);\n                setAnswers([...answers, [question, parsedResponse]]);\n            } else {\n                const parsedResponse: ChatAppResponseOrError = await response.json();\n                if (response.status > 299 || !response.ok) {\n                    throw Error(parsedResponse.error || \"Unknown error\");\n                }\n                setAnswers([...answers, [question, parsedResponse as ChatAppResponse]]);\n            }\n        } catch (e) {\n            setError(e);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const clearChat = () => {\n        lastQuestionRef.current = \"\";\n        error && setError(undefined);\n        setActiveCitation(undefined);\n        setActiveAnalysisPanelTab(undefined);\n        setAnswers([]);\n        setStreamedAnswers([]);\n        setIsLoading(false);\n        setIsStreaming(false);\n    };\n\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"smooth\" }), [isLoading]);\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"auto\" }), [streamedAnswers]);\n\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        setPromptTemplate(newValue || \"\");\n    };\n\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\n        setRetrieveCount(parseInt(newValue || \"3\"));\n    };\n\n    const onRetrievalModeChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<RetrievalMode> | undefined, index?: number | undefined) => {\n        setRetrievalMode(option?.data || RetrievalMode.Hybrid);\n    };\n\n    const onUseSemanticRankerChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSemanticRanker(!!checked);\n    };\n\n    const onUseSemanticCaptionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSemanticCaptions(!!checked);\n    };\n\n    const onShouldStreamChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setShouldStream(!!checked);\n    };\n\n    const onExcludeCategoryChanged = (_ev?: React.FormEvent, newValue?: string) => {\n        setExcludeCategory(newValue || \"\");\n    };\n\n    const onUseSuggestFollowupQuestionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSuggestFollowupQuestions(!!checked);\n    };\n\n    const onUseOidSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseOidSecurityFilter(!!checked);\n    };\n\n    const onUseGroupsSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseGroupsSecurityFilter(!!checked);\n    };\n\n    const onExampleClicked = (example: string) => {\n        makeApiRequest(example);\n    };\n\n    const onShowCitation = (citation: string, index: number) => {\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab && selectedAnswer === index) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveCitation(citation);\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\n        }\n\n        setSelectedAnswer(index);\n    };\n\n    const onToggleTab = (tab: AnalysisPanelTabs, index: number) => {\n        if (activeAnalysisPanelTab === tab && selectedAnswer === index) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveAnalysisPanelTab(tab);\n        }\n\n        setSelectedAnswer(index);\n    };\n\n    return (\n        <div className={styles.container}>\n            <div className={styles.commandsContainer}>\n                <ClearChatButton className={styles.commandButton} onClick={clearChat} disabled={!lastQuestionRef.current || isLoading} />\n                <SettingsButton className={styles.commandButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\n            </div>\n            <div className={styles.chatRoot}>\n                <div className={styles.chatContainer}>\n                    {!lastQuestionRef.current ? (\n                        <div className={styles.chatEmptyState}>\n                            <SparkleFilled fontSize={\"120px\"} primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Chat logo\" />\n                            <h1 className={styles.chatEmptyStateTitle}>Your AI-powered mentor in Sweden</h1>\n                            <h2 className={styles.chatEmptyStateSubtitle}>Ask me anything about Sweden. What makes me so special is that I will show you the reliable sources of the information I provide</h2>\n                            <ExampleList onExampleClicked={onExampleClicked} />\n                        </div>\n                    ) : (\n                        <div className={styles.chatMessageStream}>\n                            {isStreaming &&\n                                streamedAnswers.map((streamedAnswer, index) => (\n                                    <div key={index}>\n                                        <UserChatMessage message={streamedAnswer[0]} />\n                                        <div className={styles.chatMessageGpt}>\n                                            <Answer\n                                                isStreaming={true}\n                                                key={index}\n                                                answer={streamedAnswer[1]}\n                                                isSelected={false}\n                                                onCitationClicked={c => onShowCitation(c, index)}\n                                                onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\n                                                onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\n                                                onFollowupQuestionClicked={q => makeApiRequest(q)}\n                                                showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\n                                            />\n                                        </div>\n                                    </div>\n                                ))}\n                            {!isStreaming &&\n                                answers.map((answer, index) => (\n                                    <div key={index}>\n                                        <UserChatMessage message={answer[0]} />\n                                        <div className={styles.chatMessageGpt}>\n                                            <Answer\n                                                isStreaming={false}\n                                                key={index}\n                                                answer={answer[1]}\n                                                isSelected={selectedAnswer === index && activeAnalysisPanelTab !== undefined}\n                                                onCitationClicked={c => onShowCitation(c, index)}\n                                                onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\n                                                onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\n                                                onFollowupQuestionClicked={q => makeApiRequest(q)}\n                                                showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\n                                            />\n                                        </div>\n                                    </div>\n                                ))}\n                            {isLoading && (\n                                <>\n                                    <UserChatMessage message={lastQuestionRef.current} />\n                                    <div className={styles.chatMessageGptMinWidth}>\n                                        <AnswerLoading />\n                                    </div>\n                                </>\n                            )}\n                            {error ? (\n                                <>\n                                    <UserChatMessage message={lastQuestionRef.current} />\n                                    <div className={styles.chatMessageGptMinWidth}>\n                                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\n                                    </div>\n                                </>\n                            ) : null}\n                            <div ref={chatMessageStreamEnd} />\n                        </div>\n                    )}\n\n                    <div className={styles.chatInput}>\n                        <QuestionInput\n                            clearOnSend\n                            placeholder=\"Type a new question (e.g. which currency do you pay with in Sweden?)\"\n                            disabled={isLoading}\n                            onSend={question => makeApiRequest(question)}\n                        />\n                    </div>\n                </div>\n\n                {answers.length > 0 && activeAnalysisPanelTab && (\n                    <AnalysisPanel\n                        className={styles.chatAnalysisPanel}\n                        activeCitation={activeCitation}\n                        onActiveTabChanged={x => onToggleTab(x, selectedAnswer)}\n                        citationHeight=\"810px\"\n                        answer={answers[selectedAnswer][1]}\n                        activeTab={activeAnalysisPanelTab}\n                    />\n                )}\n\n                <Panel\n                    headerText=\"Configure answer generation\"\n                    isOpen={isConfigPanelOpen}\n                    isBlocking={false}\n                    onDismiss={() => setIsConfigPanelOpen(false)}\n                    closeButtonAriaLabel=\"Close\"\n                    onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>Close</DefaultButton>}\n                    isFooterAtBottom={true}\n                >\n                    <TextField\n                        className={styles.chatSettingsSeparator}\n                        defaultValue={promptTemplate}\n                        label=\"Override prompt template\"\n                        multiline\n                        autoAdjustHeight\n                        onChange={onPromptTemplateChange}\n                    />\n\n                    <SpinButton\n                        className={styles.chatSettingsSeparator}\n                        label=\"Retrieve this many search results:\"\n                        min={1}\n                        max={50}\n                        defaultValue={retrieveCount.toString()}\n                        onChange={onRetrieveCountChange}\n                    />\n                    <TextField className={styles.chatSettingsSeparator} label=\"Exclude category\" onChange={onExcludeCategoryChanged} />\n                    <Checkbox\n                        className={styles.chatSettingsSeparator}\n                        checked={useSemanticRanker}\n                        label=\"Use semantic ranker for retrieval\"\n                        onChange={onUseSemanticRankerChange}\n                    />\n                    <Checkbox\n                        className={styles.chatSettingsSeparator}\n                        checked={useSemanticCaptions}\n                        label=\"Use query-contextual summaries instead of whole documents\"\n                        onChange={onUseSemanticCaptionsChange}\n                        disabled={!useSemanticRanker}\n                    />\n                    <Checkbox\n                        className={styles.chatSettingsSeparator}\n                        checked={useSuggestFollowupQuestions}\n                        label=\"Suggest follow-up questions\"\n                        onChange={onUseSuggestFollowupQuestionsChange}\n                    />\n                    <Dropdown\n                        className={styles.chatSettingsSeparator}\n                        label=\"Retrieval mode\"\n                        options={[\n                            { key: \"hybrid\", text: \"Vectors + Text (Hybrid)\", selected: retrievalMode == RetrievalMode.Hybrid, data: RetrievalMode.Hybrid },\n                            { key: \"vectors\", text: \"Vectors\", selected: retrievalMode == RetrievalMode.Vectors, data: RetrievalMode.Vectors },\n                            { key: \"text\", text: \"Text\", selected: retrievalMode == RetrievalMode.Text, data: RetrievalMode.Text }\n                        ]}\n                        required\n                        onChange={onRetrievalModeChange}\n                    />\n                    <Checkbox\n                        className={styles.chatSettingsSeparator}\n                        checked={shouldStream}\n                        label=\"Stream chat completion responses\"\n                        onChange={onShouldStreamChange}\n                    />\n                </Panel>\n            </div>\n        </div>\n    );\n};\n\nexport default Chat;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { createHashRouter, RouterProvider } from \"react-router-dom\";\nimport { initializeIcons } from \"@fluentui/react\";\nimport { MsalProvider } from \"@azure/msal-react\";\nimport { PublicClientApplication, EventType, AccountInfo } from \"@azure/msal-browser\";\n\nimport \"./index.css\";\n\nimport Layout from \"./pages/layout/Layout\";\nimport Chat from \"./pages/chat/Chat\";\n\nvar layout;\nlayout = <Layout />;\n\ninitializeIcons();\n\nconst router = createHashRouter([\n    {\n        path: \"/\",\n        element: layout,\n        children: [\n            {\n                index: true,\n                element: <Chat />\n            },\n            {\n                path: \"qa\",\n                lazy: () => import(\"./pages/oneshot/OneShot\")\n            },\n            {\n                path: \"*\",\n                lazy: () => import(\"./pages/NoPage\")\n            }\n        ]\n    }\n]);\n\nReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement).render(\n    <React.StrictMode>\n        <RouterProvider router={router} />\n    </React.StrictMode>\n);\n"],"file":"assets/index-e69b7527.js"}